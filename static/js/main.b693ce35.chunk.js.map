{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","stack","start","end","x","y","shift","PI","partition","quickSortHelper","low","high","pivot","swap","left","right","temp","heapSortHelper","arr","n","parseInt","l","r","maxHeapify","index","getHeapSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","TERTIARY_COLOR","SortingVisualizer","useState","setArray","sizeArray","setSizeArray","isRunning","resetArray","min","max","random","a","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","timer","backgroundColor","newHeight","height","quickSort","Array","from","forEach","bar","console","log","ms","Promise","res","setTimeout","checked","arrBar1Height","arrBar2Height","tempHeight","useEffect","className","map","value","idx","onClick","disabled","id","type","onMouseUp","event","target","step","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b693ce35.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function bubbleSort(arr) {\n  let len = arr.length;\n  let checked;\n  do {\n    checked = false;\n    for (let i = 0; i < len; i++) {\n      if (arr[i] > arr[i + 1]) {\n        swap(arr, i, i + 1);\n        checked = true;\n      }\n    }\n  } while (checked);\n  return arr;\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, animations);\n  return animations;\n}\n\nfunction quickSortHelper(array, animations) {\n  let stack = [];\n\n  let start = 0;\n  let end = array.length - 1;\n  stack.push({ x: start, y: end });\n  while (stack.length) {\n    const { x, y } = stack.shift();\n\n    const PI = partition(array, x, y, animations);\n\n    if (PI - 1 > x) {\n      stack.push({ x: x, y: PI - 1 });\n    }\n    if (PI + 1 < y) {\n      stack.push({ x: PI + 1, y: y });\n    }\n  }\n  return animations;\n}\n\nfunction partition(array, low, high, animations) {\n  let pivot = array[high];\n  //pivot index\n  let i = low;\n  for (let j = low; j < high; j++) {\n    if (array[j] <= pivot) {\n      animations.push([j, i]);\n      swap(array, i, j);\n      i++;\n    }\n  }\n  animations.push([high, i, true]);\n  swap(array, i, high);\n  return i;\n}\n\nfunction swap(array, left, right) {\n  const temp = array[left];\n  array[left] = array[right];\n  array[right] = temp;\n}\n\nfunction maxHeapify(arr, n, animations) {\n  for (let i = 1; i < n; i++) {\n    if (arr[i] > arr[parseInt((i - 1) / 2)]) {\n      let j = i;\n      while (arr[j] > arr[parseInt((j - 1) / 2)]) {\n        const l = j;\n        const r = parseInt((j - 1) / 2);\n\n        [arr[l], arr[r]] = [arr[r], arr[l]];\n        animations.push([l, r]);\n        j = parseInt((j - 1) / 2);\n      }\n    }\n  }\n}\n\nfunction heapSortHelper(arr, animations) {\n  let n = arr.length;\n  maxHeapify(arr, n, animations);\n  for (let i = n - 1; i > 0; i--) {\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    animations.push([0, i]);\n    let j = 0,\n      index;\n    do {\n      index = 2 * j + 1;\n      if (index < i - 1 && arr[index] < arr[index + 1]) {\n        index++;\n      }\n      if (index < i && arr[j] < arr[index]) {\n        animations.push([j, index]);\n        [arr[j], arr[index]] = [arr[index], arr[j]];\n      }\n      j = index;\n    } while (index < i);\n  }\n  return animations;\n}\n\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  heapSortHelper(array, animations);\n  return animations;\n}\n","import \"./SortingVisualizer.css\";\nimport { useState, useEffect } from \"react\";\nimport {\n  getMergeSortAnimations,\n  getQuickSortAnimations,\n  getHeapSortAnimations,\n} from \"../sortingAlgorithms/sortingAlgorithms\";\n\nconst PRIMARY_COLOR = \"turquoise\";\n\nconst SECONDARY_COLOR = \"red\";\n\nconst TERTIARY_COLOR = \"orange\";\n\nconst ANIMATION_SPEED_MS = 1;\n\nfunction SortingVisualizer() {\n  const [array, setArray] = useState([]);\n  const [sizeArray, setSizeArray] = useState(150);\n  const [isRunning, setIsRunning] = useState(false);\n  console.log(array.arr);\n\n  useEffect(() => {\n    resetArray();\n  }, [sizeArray]);\n\n  function resetArray() {\n    const arr = [];\n    for (let i = 0; i < sizeArray; i++) {\n      arr.push(randomIntFromInterval(5, 600));\n    }\n    return setArray({ arr });\n  }\n\n  async function mergeSort() {\n    const animations = getMergeSortAnimations(array.arr);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        await timer(0);\n        barOneStyle.backgroundColor = color;\n        barTwoStyle.backgroundColor = color;\n      } else {\n        await timer(0);\n        const [barOneIdx, newHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        barOneStyle.height = `${newHeight}px`;\n      }\n    }\n  }\n\n  async function quickSort() {\n    const animations = getQuickSortAnimations(array.arr);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      const temp = arrayBars[animations[i][0]].style.height;\n      animations[i].length === 3\n        ? (arrayBars[animations[i][0]].style.backgroundColor = TERTIARY_COLOR)\n        : (arrayBars[animations[i][0]].style.backgroundColor = SECONDARY_COLOR);\n      await timer(0);\n      arrayBars[animations[i][0]].style.height =\n        arrayBars[animations[i][1]].style.height;\n      arrayBars[animations[i][1]].style.height = temp;\n      await timer(0);\n      if (animations[i].length === 2)\n        arrayBars[animations[i][0]].style.backgroundColor = PRIMARY_COLOR;\n    }\n    Array.from(arrayBars).forEach((bar) => {\n      bar.style.backgroundColor = PRIMARY_COLOR;\n    });\n    return array.arr;\n  }\n  async function heapSort() {\n    const animations = getHeapSortAnimations(array.arr);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      let temp = arrayBars[animations[i][0]].style.height;\n      arrayBars[animations[i][0]].style.height =\n        arrayBars[animations[i][1]].style.height;\n      arrayBars[animations[i][1]].style.height = temp;\n      arrayBars[animations[i][0]].style.backgroundColor = SECONDARY_COLOR;\n      arrayBars[animations[i][1]].style.backgroundColor = SECONDARY_COLOR;\n      await timer(5);\n      arrayBars[animations[i][0]].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[animations[i][1]].style.backgroundColor = PRIMARY_COLOR;\n    }\n    console.log(array.arr);\n  }\n\n  function timer(ms) {\n    return new Promise((res) => setTimeout(res, ms));\n  }\n\n  async function testQuickSort() {\n    const testArr = quickSort();\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < arrayBars.length; i++) {\n      if (parseInt(arrayBars[i].style.height) !== testArr[i]) {\n        return false;\n      }\n    }\n  }\n\n  async function bubbleSort() {\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\n    let checked;\n    let j = 1;\n    do {\n      checked = false;\n      for (let i = 0; i < arrayBars.length - j; i++) {\n        const arrBar1Height = parseInt(arrayBars[i].style.height, 10);\n        const arrBar2Height = parseInt(arrayBars[i + 1].style.height, 10);\n\n        arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[i + 1].style.backgroundColor = SECONDARY_COLOR;\n        if (arrBar1Height > arrBar2Height) {\n          let tempHeight = arrBar1Height;\n          arrayBars[i].style.height = `${arrBar2Height}px`;\n          arrayBars[i + 1].style.height = `${tempHeight}px`;\n          checked = true;\n        }\n        await timer(0);\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[i + 1].style.backgroundColor = PRIMARY_COLOR;\n      }\n      j++;\n    } while (checked);\n  }\n\n  function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  if (array.arr) {\n    return (\n      <>\n        <div className=\"array-container\">\n          {array.arr.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ backgroundColor: PRIMARY_COLOR, height: `${value}px` }}\n            ></div>\n          ))}\n        </div>\n        <div className=\"menu-container\">\n          <button onClick={resetArray} disabled={isRunning}>\n            Generate New Array\n          </button>\n          <button onClick={mergeSort}>Merge Sort</button>\n          <button onClick={quickSort}>Quick Sort</button>\n          <button onClick={heapSort}>Heap Sort</button>\n          <button onClick={bubbleSort}>Bubble Sort</button>\n          <input\n            id=\"arraySize\"\n            type=\"range\"\n            min=\"5\"\n            max=\"275\"\n            onMouseUp={(event) => setSizeArray(event.target.value)}\n            step=\"5\"\n          ></input>\n        </div>\n      </>\n    );\n  } else {\n    return <div>Loading...</div>;\n  }\n}\n\nexport default SortingVisualizer;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}